# -*- coding: utf-8 -*-
"""BM25 Implementation.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/17p7Vib_lVuVYpbOn3bV_Bd14S-AtqZhP
"""

import math
import nltk
from collections import Counter
from nltk.stem import PorterStemmer
from nltk.tokenize import word_tokenize

nltk.download('punkt')
stemmer = PorterStemmer()

def preprocess(doc):
  tokens = word_tokenize(doc.lower())
  return [stemmer.stem(token) for token in tokens if token.isalnum()]

from sklearn.datasets import fetch_20newsgroups
dataset = fetch_20newsgroups(subset = "train", categories = ["sci.space", "comp.graphics"], remove = ("headers", "footers", "quotes"))
corpus = dataset.data[:10]

k1 = 1.5 # Term frequency Scaling
b = 0.75 # Document Length Scaling

preprocessed_corpus = [preprocess(doc) for doc in corpus]
document_lengths = [len(doc) for doc in preprocessed_corpus]
avgdl = sum(document_lengths)/len(document_lengths)

term_frequencies = [Counter(doc) for doc in preprocessed_corpus]

def compute_document_frequencies(corpus):
  df = Counter()
  for doc in corpus:
    unique_terms = set(doc)
    for term in unique_terms:
      df[term] += 1
  return df

document_frequencies = compute_document_frequencies(preprocessed_corpus)
N = len(corpus)

def compute_idf(term, df, N):
  return math.log((N - df[term] + 0.5)/(df[term] + 0.5) + 1)

idf = {term : compute_idf(term, document_frequencies, N) for term in document_frequencies}

def compute_bm25_score(query, doc_index):
  query_terms = preprocess(query)
  score = 0
  for term in query_terms:
    if term not in idf:
      continue

    tf = term_frequencies[doc_index][term]
    dl = document_lengths[doc_index]

    numerator = tf * (k1 + 1)
    denominator = tf + k1 * (1 - b + b * dl/avgdl)
    score += idf[term] * (numerator/denominator)

  return score

def rank_documents(query):
  scores = []
  for doc_index in range (len(corpus)):
    score = compute_bm25_score(query, doc_index)
    scores.append((doc_index, corpus[doc_index]))

  return sorted(scores, key = lambda x: x[0], reverse = True)

query = "space technology"
ranked_results = rank_documents(query)

print(f"Query: {query}'\n")
print("Ranked results: ")
for score, doc in ranked_results:
  print(f"Score: {score:.4f} | Document: {doc[:100]}...")